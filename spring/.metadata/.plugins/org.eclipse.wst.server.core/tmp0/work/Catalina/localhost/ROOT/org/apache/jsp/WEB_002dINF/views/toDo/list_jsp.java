/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-04-24 08:53:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.toDo;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("	let memoDataOrigin = [];\r\n");
      out.write("	let memoDataCopy = [];\r\n");
      out.write("	let finished = 0;\r\n");
      out.write("	let includePast = false;\r\n");
      out.write("	let sortBasis = \"dueFast\";\r\n");
      out.write("	let searchFilter = false;\r\n");
      out.write("\r\n");
      out.write("	$(function(){\r\n");
      out.write("		callToDoList();\r\n");
      out.write("		decideCopyForShow();\r\n");
      out.write("		sortCopy();\r\n");
      out.write("		showToDoList();\r\n");
      out.write("		\r\n");
      out.write("		// 완료 여부에 따른 show 클릭 이벤트\r\n");
      out.write("		$(\".for-show-by-finished\").click(function(){\r\n");
      out.write("			$(\".for-show-by-finished\").removeClass(\"btn-primary\");\r\n");
      out.write("			$(\".for-show-by-finished\").addClass(\"btn-outline-primary\");\r\n");
      out.write("			$(this).addClass(\"btn-primary\");\r\n");
      out.write("			$(this).removeClass(\"btn-outline-primary\");\r\n");
      out.write("			\r\n");
      out.write("			finished = $(this).data(\"finished\");\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			decideCopyForShow();\r\n");
      out.write("			sortCopy();\r\n");
      out.write("			showToDoList();\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		// 마감된 일 show 클릭 이벤트\r\n");
      out.write("		$(\".for-show-by-due\").click(function(){\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("			if ($(this).hasClass(\"btn-outline-primary\")){\r\n");
      out.write("				$(this).removeClass(\"btn-outline-primary\");\r\n");
      out.write("				$(this).addClass(\"btn-primary\");\r\n");
      out.write("				includePast = true;\r\n");
      out.write("\r\n");
      out.write("			} else {\r\n");
      out.write("				$(this).addClass(\"btn-outline-primary\");\r\n");
      out.write("				$(this).removeClass(\"btn-primary\");\r\n");
      out.write("				includePast = false;\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			decideCopyForShow();\r\n");
      out.write("			sortCopy();\r\n");
      out.write("			showToDoList();\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		// 정렬 기준 클릭 이벤트\r\n");
      out.write("		$(\".for-sort\").click(function(){\r\n");
      out.write("			$(\".for-sort\").removeClass(\"btn-primary\");\r\n");
      out.write("			$(\".for-sort\").addClass(\"btn-outline-primary\");\r\n");
      out.write("			$(this).addClass(\"btn-primary\");\r\n");
      out.write("			$(this).removeClass(\"btn-outline-primary\");\r\n");
      out.write("			sortBasis = $(this).data(\"basis\");\r\n");
      out.write("\r\n");
      out.write("			decideCopyForShow();\r\n");
      out.write("			sortCopy();\r\n");
      out.write("			showToDoList();\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		// 검색필터\r\n");
      out.write("		$(\".searchFilter\").click(function(){\r\n");
      out.write("			if (!searchFilter){\r\n");
      out.write("				$(this).addClass(\"btn-primary\");\r\n");
      out.write("				$(this).removeClass(\"btn-outline-primary\");\r\n");
      out.write("				searchFilter = true;\r\n");
      out.write("				decideCopyForShow();\r\n");
      out.write("				sortCopy();\r\n");
      out.write("				showToDoList();\r\n");
      out.write("			} else {\r\n");
      out.write("				$(this).removeClass(\"btn-primary\");\r\n");
      out.write("				$(this).addClass(\"btn-outline-primary\");\r\n");
      out.write("				searchFilter = false;\r\n");
      out.write("				decideCopyForShow();\r\n");
      out.write("				sortCopy();\r\n");
      out.write("				showToDoList();\r\n");
      out.write("			}\r\n");
      out.write("		})\r\n");
      out.write("\r\n");
      out.write("		// 필터 인풋태그 키업이벤트\r\n");
      out.write("		$(\"#inputFilter\").keyup(function(){\r\n");
      out.write("			if(!searchFilter){\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			decideCopyForShow();\r\n");
      out.write("			sortCopy();\r\n");
      out.write("			showToDoList();\r\n");
      out.write("		})\r\n");
      out.write("\r\n");
      out.write("		// 완료 여부 수정\r\n");
      out.write("		// $(\"body\").on(\"change\", \".finishedCheckbox\", function(event){\r\n");
      out.write("			\r\n");
      out.write("		// 	event.stopPropagation();\r\n");
      out.write("		// 	let tno = $(this).data(\"tno\");\r\n");
      out.write("		// 	let checked = $(this).is(\":checked\");\r\n");
      out.write("\r\n");
      out.write("		// 	$.ajax({\r\n");
      out.write("		// 		url: '/toDo/updateFinished', // 데이터가 송수신될 서버의 주소\r\n");
      out.write("		// 		type: \"POST\", // 통신 방식 (GET, POST, PUT, DELETE)\r\n");
      out.write("		// 		dataType: \"text\", // 수신받을 데이터 타입 (MIME TYPE) (text, json, xml)\r\n");
      out.write("		// 		data: {\r\n");
      out.write("		// 			  \"tno\" : tno,\r\n");
      out.write("		// 			  \"finished\" : checked\r\n");
      out.write("		// 		  },  // 보내는 데이터\r\n");
      out.write("		// 		async: false, // 동기 통신 방식\r\n");
      out.write("		// 		success: function (data) {\r\n");
      out.write("		// 			// 통신이 성공하면 수행할 함수\r\n");
      out.write("		// 			console.log(data);\r\n");
      out.write("		// 			callToDoList();\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("		// 		},\r\n");
      out.write("		// 		error: function () {},\r\n");
      out.write("		// 		complete: function () {\r\n");
      out.write("		// 		},\r\n");
      out.write("		// 	});\r\n");
      out.write("		// })\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		// toDo 수정\r\n");
      out.write("		$(\"body\").on(\"click\", \".toDoBox\", function(){\r\n");
      out.write("			// console.log($(this));\r\n");
      out.write("\r\n");
      out.write("			if(!$(this).data(\"isModifying\")){\r\n");
      out.write("				let tmpTnoMemo = $(this).prop(\"id\");\r\n");
      out.write("				\r\n");
      out.write("				decideCopyForShow();\r\n");
      out.write("				sortCopy();\r\n");
      out.write("				showToDoList();\r\n");
      out.write("\r\n");
      out.write("				// $(\"a\").data(\"isModifying\", false);\r\n");
      out.write("				$(`#${tmpTnoMemo}`).data(\"isModifying\", true);\r\n");
      out.write("\r\n");
      out.write("				let toDoMemo = $(`#${tmpTnoMemo}`).find(\".toDo\").text();\r\n");
      out.write("				let dueDateMemo = $(`#${tmpTnoMemo}`).find(\".dueDate\").text();\r\n");
      out.write("				let tnoMemo = $(`#${tmpTnoMemo}`).data(\"tno\");\r\n");
      out.write("				let finishedMemo = $(`#${tmpTnoMemo}`).find(\".finishedCheckbox\").is(\":checked\");\r\n");
      out.write("				\r\n");
      out.write("				// console.log(toDoMemo, dueDateMemo, $(`#${tmpTnoMemo}`).data(\"tno\"), finishedMemo, tnoMemo);\r\n");
      out.write("\r\n");
      out.write("				let modifyOutput = ``;\r\n");
      out.write("				modifyOutput += `<input type=\"hidden\" value=\"${tnoMemo}\" name=\"tno\">`;\r\n");
      out.write("				modifyOutput += `<input type=\"text\" name=\"toDo\" value=\"${toDoMemo}\" id=\"modifyTodo-tno-${tnoMemo}\">`;\r\n");
      out.write("				modifyOutput += `<input type=\"date\" class=\"input-dueDate\" name=\"dueDateStr\" value=\"${dueDateMemo}\" id=\"modifyDueDate-tno-${tnoMemo}\">`;\r\n");
      out.write("				if (finishedMemo == true){\r\n");
      out.write("					modifyOutput += `<input type=\"checkbox\" class=\"form-check-input finishedCheckbox\" data-tno=\"${tnoMemo}\" checked> `;\r\n");
      out.write("				} else {\r\n");
      out.write("					modifyOutput += `<input type=\"checkbox\" class=\"form-check-input finishedCheckbox\" data-tno=\"${tnoMemo}\"> `;\r\n");
      out.write("				}\r\n");
      out.write("				modifyOutput += `<button type=\"submit\" class=\"btn btn-primary modifyBtn\" onclick=\"modifyTodo(this, ${tnoMemo})\">등록</button>`;\r\n");
      out.write("				modifyOutput += `<button type=\"submit\" class=\"btn btn-danger deleteBtn\" onclick=\"deleteTodo(${tnoMemo})\">삭제</button>`;\r\n");
      out.write("				\r\n");
      out.write("				$(`#${tmpTnoMemo}`).html(modifyOutput);\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("	// toDo 삭제\r\n");
      out.write("	function deleteTodo(tno){\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url: '/toDo/deleteTodo', // 데이터가 송수신될 서버의 주소\r\n");
      out.write("			type: \"POST\", // 통신 방식 (GET, POST, PUT, DELETE)\r\n");
      out.write("			dataType: \"text\", // 수신받을 데이터 타입 (MIME TYPE) (text, json, xml)\r\n");
      out.write("			data: {\r\n");
      out.write("				  \"tno\" : tno\r\n");
      out.write("			  },  // 보내는 데이터\r\n");
      out.write("			async: false, // 동기 통신 방식\r\n");
      out.write("			success: function (data) {\r\n");
      out.write("				// 통신이 성공하면 수행할 함수\r\n");
      out.write("				// console.log(data);\r\n");
      out.write("				\r\n");
      out.write("				location.reload(true);\r\n");
      out.write("			},\r\n");
      out.write("			error: function () {},\r\n");
      out.write("			complete: function () {\r\n");
      out.write("			},\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	// toDo 날짜 유효성 검사\r\n");
      out.write("	function dueDateValid(dueDateVal){\r\n");
      out.write("		let dueDate = new Date(dueDateVal);\r\n");
      out.write("		let today = new Date();\r\n");
      out.write("\r\n");
      out.write("		if(dueDate.getFullYear() > today.getFullYear() || \r\n");
      out.write("			dueDate.getFullYear() == today.getFullYear() && dueDate.getMonth() > today.getMonth() ||\r\n");
      out.write("			dueDate.getFullYear() == today.getFullYear() && dueDate.getMonth() == today.getMonth() && dueDate.getDate() >= today.getDate() ){\r\n");
      out.write("			\r\n");
      out.write("				return true;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		return false;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	// toDo 길이 유효성 검사\r\n");
      out.write("	function toDoLengthValid(toDoVal){\r\n");
      out.write("\r\n");
      out.write("		if (toDoVal.length <= 100){\r\n");
      out.write("			return true;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		return false;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	// toDo 유효성 검사 및 수정\r\n");
      out.write("	function modifyTodo(thisBtn, tno){\r\n");
      out.write("		// let toDoVal = $(thisBtn).prev().prev().prev().val();\r\n");
      out.write("		// let dueDateVal = $(thisBtn).prev().prev().val();\r\n");
      out.write("\r\n");
      out.write("		let toDoVal = $(thisBtn).siblings(`#modifyTodo-tno-${tno}`).val();\r\n");
      out.write("		let dueDateVal = $(thisBtn).siblings(`#modifyDueDate-tno-${tno}`).val();\r\n");
      out.write("		let finishedVal = $(thisBtn).siblings(`.finishedCheckbox`).is(\":checked\");\r\n");
      out.write("\r\n");
      out.write("		// console.log(toDoVal, dueDateVal);\r\n");
      out.write("\r\n");
      out.write("		let result = false;\r\n");
      out.write("		let toDoLengthValidCheck = toDoLengthValid(toDoVal);\r\n");
      out.write("		let dueDateValidCheck = dueDateValid(dueDateVal);\r\n");
      out.write("		\r\n");
      out.write("		if(toDoLengthValidCheck && dueDateValidCheck){\r\n");
      out.write("\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url: '/toDo/modifyToDo', // 데이터가 송수신될 서버의 주소\r\n");
      out.write("				type: \"POST\", // 통신 방식 (GET, POST, PUT, DELETE)\r\n");
      out.write("				dataType: \"text\", // 수신받을 데이터 타입 (MIME TYPE) (text, json, xml)\r\n");
      out.write("				data: {\r\n");
      out.write("					  \"tno\" : tno,\r\n");
      out.write("					  \"toDo\" : toDoVal,\r\n");
      out.write("					  \"dueDateStr\" : dueDateVal,\r\n");
      out.write("					  \"finished\" : finishedVal\r\n");
      out.write("				  },  // 보내는 데이터\r\n");
      out.write("				async: false, // 동기 통신 방식\r\n");
      out.write("				success: function (data) {\r\n");
      out.write("					// 통신이 성공하면 수행할 함수\r\n");
      out.write("					// console.log(data);\r\n");
      out.write("					\r\n");
      out.write("					location.reload(true);\r\n");
      out.write("				},\r\n");
      out.write("				error: function () {},\r\n");
      out.write("				complete: function () {\r\n");
      out.write("				},\r\n");
      out.write("			});\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	// 카피본 정렬\r\n");
      out.write("	function sortCopy(){\r\n");
      out.write("		\r\n");
      out.write("		if (sortBasis == \"dueFast\"){\r\n");
      out.write("\r\n");
      out.write("			for(let i = 0; i < memoDataCopy.length - 1; i++){\r\n");
      out.write("				for(let j = i + 1; j < memoDataCopy.length; j++){\r\n");
      out.write("					let iDate = new Date(memoDataCopy[i].dueDate);\r\n");
      out.write("					let jDate = new Date(memoDataCopy[j].dueDate);\r\n");
      out.write("					if(iDate - jDate > 0){\r\n");
      out.write("						let tmp = memoDataCopy[i];\r\n");
      out.write("						memoDataCopy[i] = memoDataCopy[j];\r\n");
      out.write("						memoDataCopy[j] = tmp;\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("		} else if (sortBasis == \"dueSlow\"){\r\n");
      out.write("\r\n");
      out.write("			for(let i = 0; i < memoDataCopy.length - 1; i++){\r\n");
      out.write("				for(let j = i + 1; j < memoDataCopy.length; j++){\r\n");
      out.write("					let iDate = new Date(memoDataCopy[i].dueDate);\r\n");
      out.write("					let jDate = new Date(memoDataCopy[j].dueDate);\r\n");
      out.write("					if(iDate - jDate < 0){\r\n");
      out.write("						let tmp = memoDataCopy[i];\r\n");
      out.write("						memoDataCopy[i] = memoDataCopy[j];\r\n");
      out.write("						memoDataCopy[j] = tmp;\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("		} else if (sortBasis == \"regFast\"){\r\n");
      out.write("\r\n");
      out.write("			for(let i = 0; i < memoDataCopy.length - 1; i++){\r\n");
      out.write("				for(let j = i + 1; j < memoDataCopy.length; j++){\r\n");
      out.write("					if(memoDataCopy[i].tno - memoDataCopy[j].tno > 0){\r\n");
      out.write("						let tmp = memoDataCopy[i];\r\n");
      out.write("						memoDataCopy[i] = memoDataCopy[j];\r\n");
      out.write("						memoDataCopy[j] = tmp;\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("		} else {\r\n");
      out.write("\r\n");
      out.write("			for(let i = 0; i < memoDataCopy.length - 1; i++){\r\n");
      out.write("				for(let j = i + 1; j < memoDataCopy.length; j++){\r\n");
      out.write("					if(memoDataCopy[i].tno - memoDataCopy[j].tno < 0){\r\n");
      out.write("						let tmp = memoDataCopy[i];\r\n");
      out.write("						memoDataCopy[i] = memoDataCopy[j];\r\n");
      out.write("						memoDataCopy[j] = tmp;\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	// 보여줄 toDoList 결정\r\n");
      out.write("	function decideCopyForShow(){\r\n");
      out.write("\r\n");
      out.write("		memoDataCopy = [];\r\n");
      out.write("\r\n");
      out.write("		if (finished == 0 && !includePast){\r\n");
      out.write("			$.each(memoDataOrigin, function(i, item){\r\n");
      out.write("				let remainDay = calculateRemainDay(item.dueDate);\r\n");
      out.write("				if(!item.finished && remainDay >= 0){\r\n");
      out.write("					memoDataCopy.push(item);\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("\r\n");
      out.write("		} else if (finished == 0 && includePast){\r\n");
      out.write("			$.each(memoDataOrigin, function(i, item){\r\n");
      out.write("				if(!item.finished){\r\n");
      out.write("					memoDataCopy.push(item);\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("\r\n");
      out.write("		} else if (finished == 1 && !includePast){\r\n");
      out.write("			$.each(memoDataOrigin, function(i, item){\r\n");
      out.write("				let remainDay = calculateRemainDay(item.dueDate);\r\n");
      out.write("				if(item.finished && remainDay >= 0){\r\n");
      out.write("					memoDataCopy.push(item);\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("\r\n");
      out.write("		} else if (finished == 1 && includePast){\r\n");
      out.write("			$.each(memoDataOrigin, function(i, item){\r\n");
      out.write("				if(item.finished){\r\n");
      out.write("					memoDataCopy.push(item);\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("\r\n");
      out.write("		} else if (finished == \"all\" && !includePast){\r\n");
      out.write("			$.each(memoDataOrigin, function(i, item){\r\n");
      out.write("				let remainDay = calculateRemainDay(item.dueDate);\r\n");
      out.write("				if(remainDay >= 0){\r\n");
      out.write("					memoDataCopy.push(item);\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("\r\n");
      out.write("		} else {\r\n");
      out.write("			$.each(memoDataOrigin, function(i, item){\r\n");
      out.write("				memoDataCopy.push(item);\r\n");
      out.write("			});\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		if(searchFilter){\r\n");
      out.write("			memoDataCopy = memoDataCopy.filter(toDoDTO => {\r\n");
      out.write("				let searchWord = $(\"#inputFilter\").val();\r\n");
      out.write("				return toDoDTO.toDo.includes(searchWord);\r\n");
      out.write("			})\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	// dueDate까지의 날은 일수 계산\r\n");
      out.write("	function calculateRemainDay(dueDateParam){\r\n");
      out.write("		let dueDate = new Date (dueDateParam);\r\n");
      out.write("		let tmpday = new Date();\r\n");
      out.write("		let tmpStr = `${tmpday.getFullYear()}-${tmpday.getMonth() + 1}-${tmpday.getDate()}`;\r\n");
      out.write("		let today = new Date(tmpStr);\r\n");
      out.write("\r\n");
      out.write("		let remainDay = Math.floor((dueDate - today) / 1000 / 60 / 60 / 24);\r\n");
      out.write("		return remainDay;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	// toDoList show\r\n");
      out.write("	function showToDoList(){\r\n");
      out.write("		let output = ``;\r\n");
      out.write("		$.each(memoDataCopy, function(i, item){\r\n");
      out.write("			\r\n");
      out.write("			let remainDay = calculateRemainDay(item.dueDate);\r\n");
      out.write("\r\n");
      out.write("			if (item.finished == true){\r\n");
      out.write("				output += `<a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-success toDoBox\" id=\"tno-${item.tno}\" data-tno=\"${item.tno}\" data-isModifying=\"false\">`;\r\n");
      out.write("			} else if (remainDay >= 0 && remainDay <= 3){\r\n");
      out.write("				output += `<a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-danger toDoBox\" id=\"tno-${item.tno}\" data-tno=\"${item.tno}\" data-isModifying=\"false\">`;\r\n");
      out.write("			} else if (remainDay < 0){\r\n");
      out.write("				output += `<a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-secondary toDoBox\" id=\"tno-${item.tno}\" data-tno=\"${item.tno}\" data-isModifying=\"false\">`;\r\n");
      out.write("			} else {\r\n");
      out.write("				output += `<a href=\"#\" class=\"list-group-item list-group-item-action toDoBox\" id=\"tno-${item.tno}\" data-tno=\"${item.tno}\" data-isModifying=\"false\">`;\r\n");
      out.write("			}\r\n");
      out.write("				\r\n");
      out.write("			output += `<span class=\"toDo\">${item.toDo} </span> <span class=\"dueDate\">${item.dueDate}</span>`;\r\n");
      out.write("\r\n");
      out.write("			if (item.finished == true){\r\n");
      out.write("				output += `<input type=\"checkbox\" class=\"form-check-input finishedCheckbox\" data-tno=\"${item.tno}\" checked> `;\r\n");
      out.write("			} else {\r\n");
      out.write("				output += `<input type=\"checkbox\" class=\"form-check-input finishedCheckbox\" data-tno=\"${item.tno}\"> `;\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			\r\n");
      out.write("			output += `</a>`;\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		$(\"#toDoBox\").html(output);\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	// toDoList ajax 호출\r\n");
      out.write("	function callToDoList(){\r\n");
      out.write("\r\n");
      out.write("		$.ajax({\r\n");
      out.write("	        url: '/toDo/list', // 데이터가 송수신될 서버의 주소\r\n");
      out.write("	        type: \"POST\", // 통신 방식 (GET, POST, PUT, DELETE)\r\n");
      out.write("	        dataType: \"json\", // 수신받을 데이터 타입 (MIME TYPE) (text, json, xml)\r\n");
      out.write("	        async: false, // 동기 통신 방식\r\n");
      out.write("	        success: function (data) {\r\n");
      out.write("	          // 통신이 성공하면 수행할 함수\r\n");
      out.write("			  memoDataOrigin = data;\r\n");
      out.write("	        //   console.log(memoDataOrigin);\r\n");
      out.write("	          \r\n");
      out.write("	          \r\n");
      out.write("	        },\r\n");
      out.write("	        error: function () {},\r\n");
      out.write("	        complete: function () {\r\n");
      out.write("	        },\r\n");
      out.write("	  	});\r\n");
      out.write("\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("<style>\r\n");
      out.write("	#aa {\r\n");
      out.write("		margin-top : 20px;\r\n");
      out.write("		margin-bottom : 20px;\r\n");
      out.write("	}\r\n");
      out.write("	.finishedCheckbox {\r\n");
      out.write("		margin-left: 20px;\r\n");
      out.write("		margin-right: 20px;\r\n");
      out.write("	}\r\n");
      out.write("	.dueDate {\r\n");
      out.write("		margin-left: 20px;\r\n");
      out.write("	}\r\n");
      out.write("	#for-sort-div{\r\n");
      out.write("		padding-left: 0px;\r\n");
      out.write("		margin-top: 20px;\r\n");
      out.write("	}\r\n");
      out.write("	.input-dueDate{\r\n");
      out.write("		margin-left: 20px;\r\n");
      out.write("	}\r\n");
      out.write("	.deleteBtn{\r\n");
      out.write("		margin-left: 20px;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../header.jsp", out, false);
      out.write("\r\n");
      out.write("	<div class=\"container mt-5\">\r\n");
      out.write("		<div class=\"row\">\r\n");
      out.write("		\r\n");
      out.write("			<h1>ToDoList</h1>\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			<div id=\"for-sort-div\">\r\n");
      out.write("				<ul class=\"list-group\">\r\n");
      out.write("					<li class=\"list-group-item\">\r\n");
      out.write("						완료 여부 : \r\n");
      out.write("						<button type=\"button\" class=\"btn for-show-by-finished btn-primary\" data-finished=\"0\">미완료한 일만</button>\r\n");
      out.write("						<button type=\"button\" class=\"btn btn-outline-primary for-show-by-finished\" data-finished=\"1\">완료한 일만</button>\r\n");
      out.write("						<button type=\"button\" class=\"btn btn-outline-primary for-show-by-finished\" data-finished=\"all\">모두</button>\r\n");
      out.write("					</li>\r\n");
      out.write("					<li class=\"list-group-item\">\r\n");
      out.write("						지나간 일 포함 여부 : \r\n");
      out.write("						<button type=\"button\" class=\"btn btn-outline-primary for-show-by-due\">지나간 일 포함</button>\r\n");
      out.write("					</li>\r\n");
      out.write("					<li class=\"list-group-item\">\r\n");
      out.write("						정렬 기준 : \r\n");
      out.write("						<button type=\"button\" class=\"btn for-sort btn-primary\" data-basis=\"dueFast\">마감일 빠른 기준</button>\r\n");
      out.write("						<button type=\"button\" class=\"btn btn-outline-primary for-sort\" data-basis=\"dueSlow\">마감일 느린 기준</button>\r\n");
      out.write("						<button type=\"button\" class=\"btn btn-outline-primary for-sort\" data-basis=\"regFast\">작성일 빠른 기준</button>\r\n");
      out.write("						<button type=\"button\" class=\"btn btn-outline-primary for-sort\" data-basis=\"regSlow\">작성일 느린 기준</button>\r\n");
      out.write("					</li>\r\n");
      out.write("					<li class=\"list-group-item\">\r\n");
      out.write("						<div class=\"input-group mb-3\">\r\n");
      out.write("							<button class=\"btn btn-outline-primary searchFilter\" type=\"submit\">검색필터켜기</button>\r\n");
      out.write("							<input type=\"text\" class=\"form-control\" placeholder=\"Search\" id=\"inputFilter\">\r\n");
      out.write("						</div>\r\n");
      out.write("					</li>\r\n");
      out.write("				  </ul>\r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("			<h4 id=\"aa\">클릭으로 수정</h4>\r\n");
      out.write("\r\n");
      out.write("			<div class=\"list-group\" id=\"toDoBox\">\r\n");
      out.write("\r\n");
      out.write("			</div>		\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../footer.jsp", out, false);
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
