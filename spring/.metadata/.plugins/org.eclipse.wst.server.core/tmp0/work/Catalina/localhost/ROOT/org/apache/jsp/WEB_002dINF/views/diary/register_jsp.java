/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-04-14 06:17:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.diary;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class register_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("<title>다이어리 등록</title>\r\n");
      out.write("<script>\r\n");
      out.write("	$(function(){\r\n");
      out.write("		\r\n");
      out.write("		$(\"#title\").on(\"blur\", function(){\r\n");
      out.write("			validTitle();\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		$(\"#dueDate\").on(\"blur\", function(){\r\n");
      out.write("			validDueDate();\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("		$(\"#writer\").on(\"blur\", function(){\r\n");
      out.write("			validWriter();\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	function validWriter(){\r\n");
      out.write("		// 작성자는 not null\r\n");
      out.write("		let result = false;\r\n");
      out.write("		let writer = $(\"#writer\").val();\r\n");
      out.write("		\r\n");
      out.write("		if(writer == ''){\r\n");
      out.write("			$(\"#writerError\").html(\"작성자는 필수항목입니다.\");\r\n");
      out.write("		} else {\r\n");
      out.write("			$(\"#writerError\").html(\"\");\r\n");
      out.write("			result = true;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		return result;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function validDueDate(){\r\n");
      out.write("		\r\n");
      out.write("		// 완료일 : 오늘이나 그 이전 날짜는 입력받지 않도록 한다.\r\n");
      out.write("		// 필수\r\n");
      out.write("		let result = false;\r\n");
      out.write("		let dueDate = $(\"#dueDate\").val(); // 2025-04-11\r\n");
      out.write("		console.log(dueDate);\r\n");
      out.write("		\r\n");
      out.write("		let today = new Date().toISOString().split(\"T\")[0];\r\n");
      out.write("		console.log(today); // 오늘의 날짜만\r\n");
      out.write("		\r\n");
      out.write("		if (dueDate == \"\"){\r\n");
      out.write("			$(\"#dueDateError\").html(\"완료일은 필수항목입니다.\");\r\n");
      out.write("// 		} else if (new Date(dueDate).getTime() - new Date().getTime() < 0){\r\n");
      out.write("		} else if (new Date(dueDate) - Date.now() < 0){\r\n");
      out.write("			$(\"#dueDateError\").html(\"완료일은 오늘 이후로 설정해야 합니다.\");\r\n");
      out.write("		} else{\r\n");
      out.write("			$(\"#dueDateError\").html(\"\")\r\n");
      out.write("			result = true;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		return result;\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function validTitle(){\r\n");
      out.write("		let result = false;\r\n");
      out.write("		// 필수, 100자\r\n");
      out.write("		let title = $(\"#title\").val();\r\n");
      out.write("		\r\n");
      out.write("		if(title == \"\"){\r\n");
      out.write("			$(\"#titleError\").html(\"제목을 입력하세요\");\r\n");
      out.write("		} else {\r\n");
      out.write("			$(\"#titleError\").html(\"\");\r\n");
      out.write("			result = true;\r\n");
      out.write("		}\r\n");
      out.write("		return result;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function isValid(){\r\n");
      out.write("		\r\n");
      out.write("		let result = false;\r\n");
      out.write("		\r\n");
      out.write("		let titleValid = validTitle();\r\n");
      out.write("		let dueDateValid = validDueDate();\r\n");
      out.write("		let writerValid = validWriter();\r\n");
      out.write("		\r\n");
      out.write("		console.log(titleValid, dueDateValid, writerValid);\r\n");
      out.write("		\r\n");
      out.write("		if (titleValid && dueDateValid && writerValid){\r\n");
      out.write("			result = true;\r\n");
      out.write("		}\r\n");
      out.write("		return result;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function clearErrors(){\r\n");
      out.write("		$(\"#titleError\").html(\"\");\r\n");
      out.write("		$(\"#dueDateError\").html(\"\");\r\n");
      out.write("		$(\"#writerError\").html(\"\");\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../header.jsp", out, false);
      out.write("\r\n");
      out.write("	<div class=\"container mt-5\">\r\n");
      out.write("		<div class=\"row\">\r\n");
      out.write("	\r\n");
      out.write("			<h1>다이어리 등록</h1>\r\n");
      out.write("			\r\n");
      out.write("			<form action=\"/diary/register\" method=\"post\">\r\n");
      out.write("			  <div class=\"mb-3 mt-3\">\r\n");
      out.write("			    <label for=\"title\" class=\"form-label\">Title:</label>\r\n");
      out.write("			    <span id=\"titleError\"></span>\r\n");
      out.write("			    <input type=\"text\" class=\"form-control\" id=\"title\" placeholder=\"제목\" name=\"title\">\r\n");
      out.write("			  </div>\r\n");
      out.write("			  <div class=\"mb-3\">\r\n");
      out.write("			    <label for=\"dueDate\" class=\"form-label\">Due Date:</label>\r\n");
      out.write("			    <span id=\"dueDateError\"></span>\r\n");
      out.write("			    <input type=\"date\" class=\"form-control\" id=\"dueDate\" name=\"dueDateStr\">\r\n");
      out.write("			  </div>\r\n");
      out.write("			  <div class=\"mb-3 mt-3\">\r\n");
      out.write("<!-- 			    <label for=\"writer\" class=\"form-label\">Writer:</label> -->\r\n");
      out.write("<!-- 			    <span id=\"writerError\"></span> -->\r\n");
      out.write("			    <input type=\"hidden\" class=\"form-control\" id=\"writer\" placeholder=\"작성자\" name=\"writer\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.memberId }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("			  </div>\r\n");
      out.write("			  <button type=\"submit\" class=\"btn btn-primary\" onclick=\"return isValid();\">Submit</button>\r\n");
      out.write("			  <button type=\"reset\" class=\"btn btn-secondary\" onclick=\"clearErrors();\">Reset</button>\r\n");
      out.write("			</form>\r\n");
      out.write("			\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../footer.jsp", out, false);
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
