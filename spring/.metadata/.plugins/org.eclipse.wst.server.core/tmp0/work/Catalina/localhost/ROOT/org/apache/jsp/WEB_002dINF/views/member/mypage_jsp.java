/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-04-24 03:49:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class mypage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("	let prevPwd = \"\";\r\n");
      out.write("	let prevEmail = \"\";\r\n");
      out.write("	let prevName = \"\";\r\n");
      out.write("\r\n");
      out.write("	$(function(){\r\n");
      out.write("\r\n");
      out.write("		prevPwd = $(\"#memberPwd\").val();\r\n");
      out.write("		prevEmail = $(\"#email\").val();\r\n");
      out.write("		prevName = $(\"#memberName\").val();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		// 비밀번호 변경 버튼 클릭\r\n");
      out.write("		$(\"#modifyPwdBtn\").click(function(e){\r\n");
      out.write("			e.preventDefault();\r\n");
      out.write("			makePwdModal();\r\n");
      out.write("			$(\"#saveBtn\").attr(\"onclick\", \"savePwd();\")\r\n");
      out.write("			$(\".modal1-title\").text(\"비밀번호 변경\");\r\n");
      out.write("			$(\"#modifyModal\").show();\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		// pwd 정규식 검사\r\n");
      out.write("		$(\"body\").on(\"keyup\", \"#modifyPwd1\", function(){\r\n");
      out.write("			$(\"#modifyPwdRegValid\").val(\"\");\r\n");
      out.write("			$(\"#modifyPwdValid\").val(\"\");\r\n");
      out.write("			let tmpPwd = $(\"#modifyPwd1\").val();\r\n");
      out.write("			const regex_pwd = /^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[@$!%*?&#.~_-])[A-Za-z\\d@$!%*?&#.~_-]{8,20}$/;\r\n");
      out.write("\r\n");
      out.write("			if(!regex_pwd.test(tmpPwd)){\r\n");
      out.write("				// 비밀번호 정규식 불통과\r\n");
      out.write("				outputError(\"비밀번호는 8~20자리 영문과 숫자, 특수문자의 조합으로 해주세요\", this, \"red\");\r\n");
      out.write("			} else {\r\n");
      out.write("				outputError(\"사용가능한 비밀번호입니다.\", this, \"green\");\r\n");
      out.write("				$(\"#modifyPwdRegValid\").val(\"checked\");\r\n");
      out.write("				isEqualPwd();\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		// pwd2 일치여부 검사\r\n");
      out.write("		$(\"body\").on(\"keyup\", \"#modifyPwd2\", function(){\r\n");
      out.write("			$(\"#modifyPwdValid\").val(\"\");\r\n");
      out.write("			isEqualPwd();\r\n");
      out.write("		})\r\n");
      out.write("\r\n");
      out.write("		// 이메일 변경 버튼 클릭\r\n");
      out.write("		$(\"#modifyEmailBtn\").click(function(e){\r\n");
      out.write("			e.preventDefault();\r\n");
      out.write("			makeEmailModal();\r\n");
      out.write("			$(\"#saveBtn\").attr(\"onclick\", \"saveEmail();\")\r\n");
      out.write("			$(\".modal1-title\").text(\"이메일 변경\");\r\n");
      out.write("			$(\"#modifyModal\").show();\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		// 이메일 검사\r\n");
      out.write("		$(\"body\").on(\"keyup\", \"#modifyEmail\", function(){\r\n");
      out.write("			$(\"#emailRegValid\").val(\"\");\r\n");
      out.write("			if ($(\"#modifyEmail\").val().length > 0) {\r\n");
      out.write("				checkEmail();\r\n");
      out.write("			} else {\r\n");
      out.write("				outputError(\"이메일은 필수항목입니다.\", $(\"#modifyEmail\"), \"red\");\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		// 이메일 중복검사\r\n");
      out.write("		$(\"body\").on(\"click\", \"#emailDupCheckBtn\", function(){\r\n");
      out.write("			\r\n");
      out.write("			checkEmailDup();\r\n");
      out.write("		})\r\n");
      out.write("\r\n");
      out.write("		// 인증메일 보내기\r\n");
      out.write("		$(\"body\").on(\"click\", \"#sendEmail\", function(){\r\n");
      out.write("			\r\n");
      out.write("			if($(\"#emailRegValid\").val() != \"checked\"){\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			$(\"#modifyEmail\").attr(\"disabled\", true);\r\n");
      out.write("			sendMail();\r\n");
      out.write("		})\r\n");
      out.write("\r\n");
      out.write("		// 이름 변경 버튼 클릭\r\n");
      out.write("		$(\"#modifyNameBtn\").click(function(e){\r\n");
      out.write("			e.preventDefault();\r\n");
      out.write("			makeNameModal();\r\n");
      out.write("			$(\"#saveBtn\").attr(\"onclick\", \"saveName();\")\r\n");
      out.write("			$(\".modal1-title\").text(\"이름 변경\");\r\n");
      out.write("			$(\"#modifyModal\").show();\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		// 이름 검사\r\n");
      out.write("		$(\"body\").on(\"keyup\", \"#modifyMemberName\", function(){\r\n");
      out.write("			$(\"#modifyNameValid\").val(\"\");\r\n");
      out.write("			checkNameValid();\r\n");
      out.write("		})\r\n");
      out.write("\r\n");
      out.write("		// 탈퇴 버튼\r\n");
      out.write("		$(\"#leaveBtn\").click(function(e){\r\n");
      out.write("			e.preventDefault();\r\n");
      out.write("			$(\"#checkLeaveModal\").show();\r\n");
      out.write("		})\r\n");
      out.write("\r\n");
      out.write("		// 모달 닫기 버튼\r\n");
      out.write("		$(\".closeModal\").click(function(){\r\n");
      out.write("			$(\"#modifyModal\").hide();\r\n");
      out.write("			$(\"#checkLeaveModal\").hide();\r\n");
      out.write("		});\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("	let count = 180;\r\n");
      out.write("	let timer;\r\n");
      out.write("	let stopper;\r\n");
      out.write("\r\n");
      out.write("	function saveName(){\r\n");
      out.write("		if($(\"#modifyNameValid\").val() != \"checked\"){\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		let modifyName = $(\"#modifyMemberName\").val();\r\n");
      out.write("		$(\"#memberName\").val(modifyName);\r\n");
      out.write("		$(\"#modifyModal\").hide();\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function checkNameValid(){\r\n");
      out.write("\r\n");
      out.write("		if($(\"#modifyMemberName\").val() == \"\"){\r\n");
      out.write("			outputError(\"이름은 필수 항목입니다\", $(\"#modifyMemberName\"), \"red\");\r\n");
      out.write("		} else {\r\n");
      out.write("			clearError($(\"#modifyMemberName\"));\r\n");
      out.write("			$(\"#modifyNameValid\").val(\"checked\");\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function makeNameModal(){\r\n");
      out.write("		let output = `<div class=\"mb-3\">`;\r\n");
      out.write("		output += `<label for=\"modifyMemberName\">이름 : </label><span></span>`;\r\n");
      out.write("		output += `<input type=\"text\" class=\"form-control\" id=\"modifyMemberName\" placeholder=\"이름을 입력하세요\" name=\"memberName\" >`;\r\n");
      out.write("		output += `<input type=\"hidden\" id=\"modifyNameValid\"/>`;\r\n");
      out.write("		output += `</div>`;\r\n");
      out.write("\r\n");
      out.write("		$(\".modal1-body\").html(output);\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function saveEmail(){\r\n");
      out.write("		if($(\"#emailValid\").val() != \"checked\"){\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		let modifyEmail = $(\"#modifyEmail\").val();\r\n");
      out.write("		$(\"#email\").val(modifyEmail);\r\n");
      out.write("		$(\"#modifyModal\").hide();\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	function setTimer(){\r\n");
      out.write("		count = 180;\r\n");
      out.write("		let timerDate = new Date(count * 1000);\r\n");
      out.write("		let timerString = `${timerDate.getMinutes()} : ${timerDate.getSeconds()}`;\r\n");
      out.write("		$(\".timer\").html(timerString);\r\n");
      out.write("		timer = setInterval(doTimer, 1000);\r\n");
      out.write("		// setTimeout(stopTimer, 180000);\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function doTimer(){\r\n");
      out.write("		count--;\r\n");
      out.write("		if(count < 0){\r\n");
      out.write("			clearTimeout(timer);\r\n");
      out.write("			$(\".timer\").html(\"인증시간이 만료되었습니다.\");\r\n");
      out.write("\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				url: '/member/clearAuthCode', // 데이터가 송수신될 서버의 주소\r\n");
      out.write("				type: \"POST\", // 통신 방식 (GET, POST, PUT, DELETE)\r\n");
      out.write("				dataType: \"text\", // 수신받을 데이터 타입 (MIME TYPE) (text, json, xml)\r\n");
      out.write("				// async: false, // 동기 통신 방식\r\n");
      out.write("				success: function (data) {\r\n");
      out.write("					// 통신이 성공하면 수행할 함수\r\n");
      out.write("					\r\n");
      out.write("					$(\"#authBtn\").css(\"display\", \"none\");\r\n");
      out.write("					$(\"#reAuthBtn\").css(\"display\", \"block\");\r\n");
      out.write("				},\r\n");
      out.write("				error: function () {},\r\n");
      out.write("				complete: function () {\r\n");
      out.write("				},\r\n");
      out.write("			});\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		let timerDate = new Date(count * 1000);\r\n");
      out.write("		let timerString = `${timerDate.getMinutes()} : ${timerDate.getSeconds()}`;\r\n");
      out.write("		$(\".timer\").html(timerString);	\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function reAuth(){\r\n");
      out.write("		$(\"#emailValid\").val(\"\");\r\n");
      out.write("		$(\"#modifyEmail\").attr(\"disabled\", false)\r\n");
      out.write("		clearError($(\"#modifyEmail\"));\r\n");
      out.write("		$(\"#forCheckAuthDiv\").empty();\r\n");
      out.write("		$(\"#emailDupCheckBtn\").css(\"display\", \"block\");\r\n");
      out.write("\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function checkAuthCode(){\r\n");
      out.write("		\r\n");
      out.write("		let memberAuthCode = $(\"#memberAuthCode\").val();\r\n");
      out.write("\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url: '/member/checkAuthCode', // 데이터가 송수신될 서버의 주소\r\n");
      out.write("			type: \"POST\", // 통신 방식 (GET, POST, PUT, DELETE)\r\n");
      out.write("			data: {\r\n");
      out.write("				\"memberAuthCode\" : memberAuthCode\r\n");
      out.write("			},  // 보내는 데이터\r\n");
      out.write("			dataType: \"text\", // 수신받을 데이터 타입 (MIME TYPE) (text, json, xml)\r\n");
      out.write("			// async: false, // 동기 통신 방식\r\n");
      out.write("			success: function (data) {\r\n");
      out.write("				// 통신이 성공하면 수행할 함수\r\n");
      out.write("				if(data == \"true\"){\r\n");
      out.write("					$(\".timer\").empty();\r\n");
      out.write("					$(\"#authBtn\").css(\"display\", \"none\");\r\n");
      out.write("					$(\"#memberAuthCode\").css(\"display\", \"none\");\r\n");
      out.write("					outputError(\"인증에 성공했습니다\", $(\".timer\"), \"green\");\r\n");
      out.write("					$(\"#emailValid\").val(\"checked\");\r\n");
      out.write("					clearTimeout(timer);\r\n");
      out.write("					clearError($(\"#authBtn\"));\r\n");
      out.write("				} else {\r\n");
      out.write("					outputError(\"잘못된 인증번호입니다\", $(\"#authBtn\"), \"red\");\r\n");
      out.write("				}\r\n");
      out.write("			\r\n");
      out.write("			},\r\n");
      out.write("			error: function () {},\r\n");
      out.write("			complete: function () {\r\n");
      out.write("			},\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function sendMail(){\r\n");
      out.write("		clearTimeout(timer);\r\n");
      out.write("\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url: '/member/callSendMail', // 데이터가 송수신될 서버의 주소\r\n");
      out.write("			type: \"POST\", // 통신 방식 (GET, POST, PUT, DELETE)\r\n");
      out.write("			data: {\r\n");
      out.write("				\"tmpMemberEmail\" : $(\"#modifyEmail\").val()\r\n");
      out.write("			},  // 보내는 데이터\r\n");
      out.write("			dataType: \"text\", // 수신받을 데이터 타입 (MIME TYPE) (text, json, xml)\r\n");
      out.write("			// async: false, // 동기 통신 방식\r\n");
      out.write("			success: function (data) {\r\n");
      out.write("			// 통신이 성공하면 수행할 함수\r\n");
      out.write("			if (data == \"success\"){\r\n");
      out.write("				alert(\"이메일로 인증번호를 발송했습니다. 인증코드를 입력해주세요.\")\r\n");
      out.write("				\r\n");
      out.write("				if($(\".authenticationDiv\").length == 0){\r\n");
      out.write("					$(\"#sendEmail\").css(\"display\", \"none\");\r\n");
      out.write("					showAuthenticateDiv(); // 인증번호를 입력받을 태그 요소를 출력\r\n");
      out.write("				} \r\n");
      out.write("				\r\n");
      out.write("			} else {\r\n");
      out.write("				alert(\"이메일 발송 실패! 잠시 후 다시 시도해주세요\");\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			},\r\n");
      out.write("			error: function () {},\r\n");
      out.write("			complete: function () {\r\n");
      out.write("			},\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function showAuthenticateDiv(){\r\n");
      out.write("	\r\n");
      out.write("		let authDiv = `<div class=\"authenticationDiv mt-2\">\r\n");
      out.write("				<input type=\"text\" class=\"form-control\" id=\"memberAuthCode\" placeholder=\"인증번호를 입력하세요..\" />\r\n");
      out.write("				<div class=\"d-flex align-items-center\">\r\n");
      out.write("				<span></span>\r\n");
      out.write("				<span class=\"timer\">3:00</span>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div></div>\r\n");
      out.write("				<button type=\"button\" id=\"authBtn\" class=\"btn btn-info\" onclick=\"checkAuthCode();\">인증하기</button>\r\n");
      out.write("				<button type=\"button\" id=\"reAuthBtn\" class=\"btn btn-success\" onclick=\"reAuth();\" style=\"display: none\">다시 입력하기</button>\r\n");
      out.write("				<span></span>\r\n");
      out.write("				<div id=\"forAuthCheckErrorDiv\" style=\"display: none;\"></div>\r\n");
      out.write("				</div>`;\r\n");
      out.write("		\r\n");
      out.write("		// $(authDiv).insertAfter(\"#email\");\r\n");
      out.write("		$(\"#forCheckAuthDiv\").append(authDiv);\r\n");
      out.write("		\r\n");
      out.write("		setTimer();\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function checkEmailDup(){\r\n");
      out.write("		if($(\"#emailRegValid\").val() != \"checked\"){\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		let tmpEmail = $(\"#modifyEmail\").val();\r\n");
      out.write("\r\n");
      out.write("		$.ajax({\r\n");
      out.write("		      url: \"/member/isDuplicatedEmail\", // 데이터가 송수신될 서버의 주소\r\n");
      out.write("		      type: \"POST\", // 통신 방식 (GET, POST, PUT, DELETE)\r\n");
      out.write("			  data: {\r\n");
      out.write("				  tmpEmail : tmpEmail\r\n");
      out.write("			  },  // 보내는 데이터\r\n");
      out.write("		      dataType: \"text\", // 수신받을 데이터 타입 (MIME TYPE)\r\n");
      out.write("		      // async: false, // 동기 통신 방식\r\n");
      out.write("		      success: function (data) {\r\n");
      out.write("		        // 통신이 성공하면 수행할 함수\r\n");
      out.write("		        // console.log(data);\r\n");
      out.write("				if(data == \"true\"){\r\n");
      out.write("					outputError(\"이미 존재하는 이메일입니다.\", $(\"#modifyEmail\"), \"red\");\r\n");
      out.write("				} else {\r\n");
      out.write("					clearError($(\"#modifyEmail\"));\r\n");
      out.write("					outputError(\"사용가능한 이메일입니다.\", $(\"#modifyEmail\"), \"green\")\r\n");
      out.write("					$(\"#sendEmail\").css(\"display\", \"block\");\r\n");
      out.write("					$(\"#emailDupCheckBtn\").css(\"display\", \"none\");\r\n");
      out.write("				}\r\n");
      out.write("			\r\n");
      out.write("		      },\r\n");
      out.write("		      error: function () {},\r\n");
      out.write("		      complete: function () {\r\n");
      out.write("		      },\r\n");
      out.write("    	});\r\n");
      out.write("\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function checkEmail(){\r\n");
      out.write("\r\n");
      out.write("		let tmpMemberEmail = $(\"#modifyEmail\").val();\r\n");
      out.write("		let emailRegExp = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n");
      out.write("\r\n");
      out.write("		if (!emailRegExp.test(tmpMemberEmail)){\r\n");
      out.write("			outputError(\"이메일 형식이 아닙니다.\", $(\"#modifyEmail\"), \"red\");\r\n");
      out.write("		} else {\r\n");
      out.write("			outputError(\"이메일 형식입니다.\", $(\"#modifyEmail\"), \"green\");\r\n");
      out.write("			$(\"#emailRegValid\").val(\"checked\");\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function makeEmailModal(){\r\n");
      out.write("		let output = `<div class=\"mb-3 mt-3\">`;\r\n");
      out.write("		output += `<label for=\"modifyEmail\">이메일 :</label><span></span>`;\r\n");
      out.write("		output += `<input type=\"email\" class=\"form-control\" id=\"modifyEmail\" placeholder=\"이메일을 입력하세요\">`;\r\n");
      out.write("		output += `<div id=\"forCheckAuthDiv\"></div>`;\r\n");
      out.write("		output += `<input type=\"hidden\" id=\"emailRegValid\"/>`;\r\n");
      out.write("		output += `<input type=\"hidden\" id=\"emailValid\"/>`;\r\n");
      out.write("		output += `<button class=\"btn btn-success check-btn\" id=\"emailDupCheckBtn\">이메일 중복확인</button>`;\r\n");
      out.write("		output += `<button class=\"btn btn-primary check-btn\" style=\"display: none;\" id=\"sendEmail\">인증메일 보내기</button>`;\r\n");
      out.write("		output += `</div>`;\r\n");
      out.write("\r\n");
      out.write("		$(\".modal1-body\").html(output);\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function isEqualPwd(){\r\n");
      out.write("		let pwd1 = $(\"#modifyPwd1\").val();\r\n");
      out.write("		let pwd2 = $(\"#modifyPwd2\").val();\r\n");
      out.write("\r\n");
      out.write("		if (pwd1 == pwd2){\r\n");
      out.write("			outputError(\"비밀번호가 일치합니다\", $(\"#modifyPwd2\"), \"green\");\r\n");
      out.write("			$(\"#modifyPwdValid\").val(\"checked\");\r\n");
      out.write("		} else {\r\n");
      out.write("			outputError(\"비밀번호가 일치하지 않습니다\", $(\"#modifyPwd2\"), \"red\");\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function savePwd(){\r\n");
      out.write("		// 비밀번호 정규식 false면 여기서 리턴 < signup페이지에도 추가해야함\r\n");
      out.write("		if($(\"#modifyPwdValid\").val() != \"checked\" || $(\"#modifyPwdRegValid\").val() != \"checked\"){\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		let modifyPwd = $(\"#modifyPwd1\").val();\r\n");
      out.write("		$(\"#memberPwd\").val(modifyPwd);\r\n");
      out.write("		$(\"#modifyModal\").hide();\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function makePwdModal(){\r\n");
      out.write("		let output = ``;\r\n");
      out.write("		output += `<div class=\"mb-3 mt-3\">`;\r\n");
      out.write("		output += `<label for=\"modifyPwd\" class=\"form-label\">변경할 비밀번호:</label><span></span>`;\r\n");
      out.write("		output += `<input type=\"password\" class=\"form-control\" id=\"modifyPwd1\" placeholder=\"변경할 비밀번호를 입력하세요\">`;\r\n");
      out.write("		output += `<input type=\"hidden\" id=\"modifyPwdRegValid\"/>`;\r\n");
      out.write("		output += `<input type=\"hidden\" id=\"modifyPwdValid\"/>`;\r\n");
      out.write("		output += `</div>`;\r\n");
      out.write("		output += `<div class=\"mb-3\">`;\r\n");
      out.write("		output += `<label for=\"modifyPwd2\" class=\"form-label\">비밀번호 확인:</label><span></span>`;\r\n");
      out.write("		output += `<input type=\"password\" class=\"form-control\" id=\"modifyPwd2\" placeholder=\"비밀번호를 다시 한 번 입력하세요\">`;\r\n");
      out.write("		output += `</div>`;\r\n");
      out.write("\r\n");
      out.write("		$(\".modal1-body\").html(output);\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function clearError(tagObj){\r\n");
      out.write("		let errorObj = $(tagObj).prev();\r\n");
      out.write("		$(errorObj).empty();\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function outputError(msg, tagObj, color){\r\n");
      out.write("		let errorObj = $(tagObj).prev();\r\n");
      out.write("		errorObj.html(msg);\r\n");
      out.write("		$(errorObj).css(\"color\", color);\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	function isValidModify(){\r\n");
      out.write("\r\n");
      out.write("		if($(\"#memberPwd\").val() == prevPwd && $(\"#email\").val() == prevEmail && $(\"#memberName\").val() == prevName ){\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		$(\"#memberId\").attr(\"disabled\", false);\r\n");
      out.write("		$(\"#memberPwd\").attr(\"disabled\", false);\r\n");
      out.write("		$(\"#email\").attr(\"disabled\", false);\r\n");
      out.write("		$(\"#memberName\").attr(\"disabled\", false);\r\n");
      out.write("\r\n");
      out.write("		return true;\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("<style>\r\n");
      out.write("	#title {\r\n");
      out.write("		margin-bottom: 50px;\r\n");
      out.write("	}\r\n");
      out.write("	.check-btn {\r\n");
      out.write("		margin-top: 10px;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	.timer {color : red }\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../header.jsp", out, false);
      out.write("\r\n");
      out.write("	<div class=\"container mt-5\">\r\n");
      out.write("		<div class=\"row\">\r\n");
      out.write("		\r\n");
      out.write("			<h1 id=\"title\">내 정보 수정</h1>\r\n");
      out.write("			<form action=\"modifyMyInformation\" method=\"post\">\r\n");
      out.write("\r\n");
      out.write("				<div class=\"input-group mb-3\">\r\n");
      out.write("					<span class=\"input-group-text\">아이디</span>\r\n");
      out.write("					<input type=\"text\" class=\"form-control\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.memberId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" disabled=\"true\" id=\"memberId\" name=\"memberId\">\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"input-group mb-3\">\r\n");
      out.write("					<span class=\"input-group-text\">비밀번호</span>\r\n");
      out.write("					<input type=\"password\" class=\"form-control\" disabled=\"true\" id=\"memberPwd\" name=\"memberPwd\">\r\n");
      out.write("					<button class=\"btn btn-success\" id=\"modifyPwdBtn\">비밀번호 변경</button>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"input-group mb-3\">\r\n");
      out.write("					<span class=\"input-group-text\">이메일</span>\r\n");
      out.write("					<input type=\"email\" class=\"form-control\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.email}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" disabled=\"true\" id=\"email\" name=\"email\">\r\n");
      out.write("					<button class=\"btn btn-success\" id=\"modifyEmailBtn\">이메일 변경</button>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"input-group mb-3\">\r\n");
      out.write("					<span class=\"input-group-text\">이름</span>\r\n");
      out.write("					<input type=\"text\" class=\"form-control\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginMember.memberName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" disabled=\"true\" id=\"memberName\" name=\"memberName\">\r\n");
      out.write("					<button class=\"btn btn-success\" id=\"modifyNameBtn\">이름 변경</button>\r\n");
      out.write("				</div>\r\n");
      out.write("				<button type=\"submit\" class=\"btn btn-primary\" onclick=\"return isValidModify();\">수정</button>\r\n");
      out.write("				<button class=\"btn btn-danger\" id=\"leaveBtn\">회원탈퇴</button>\r\n");
      out.write("				<!-- 모달창으로 한번 더 확인 -->\r\n");
      out.write("			</form>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<!-- The Modal -->\r\n");
      out.write("	<div class=\"modal\" id=\"modifyModal\">\r\n");
      out.write("		<div class=\"modal-dialog\">\r\n");
      out.write("		  <div class=\"modal-content\">\r\n");
      out.write("	  \r\n");
      out.write("			<!-- Modal Header -->\r\n");
      out.write("			<div class=\"modal-header\">\r\n");
      out.write("				<!-- 아래 내용도 동적 -->\r\n");
      out.write("			  <h4 class=\"modal-title modal1-title\"></h4>\r\n");
      out.write("			  <button type=\"button\" class=\"btn-close closeModal\" data-bs-dismiss=\"modal\"></button>\r\n");
      out.write("			</div>\r\n");
      out.write("	  \r\n");
      out.write("			<!-- Modal body -->\r\n");
      out.write("			<div class=\"modal-body modal1-body\">\r\n");
      out.write("			  \r\n");
      out.write("			  \r\n");
      out.write("			  \r\n");
      out.write("			</div>\r\n");
      out.write("	  \r\n");
      out.write("			<!-- Modal footer -->\r\n");
      out.write("			<div class=\"modal-footer\">\r\n");
      out.write("				<!-- 아래도 동적 -->\r\n");
      out.write("			  <button type=\"button\" class=\"btn btn-success\" id=\"saveBtn\">저장</button> \r\n");
      out.write("			  <button type=\"button\" class=\"btn btn-danger closeModal\" data-bs-dismiss=\"modal\">닫기</button>\r\n");
      out.write("			</div>\r\n");
      out.write("	  \r\n");
      out.write("		  </div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<!-- The Modal2 -->\r\n");
      out.write("	<div class=\"modal\" id=\"checkLeaveModal\">\r\n");
      out.write("		<div class=\"modal-dialog\">\r\n");
      out.write("		  <div class=\"modal-content\">\r\n");
      out.write("	  \r\n");
      out.write("			<!-- Modal Header -->\r\n");
      out.write("			<div class=\"modal-header\">\r\n");
      out.write("				<!-- 아래 내용도 동적 -->\r\n");
      out.write("			  <h4 class=\"modal-title\">회원탈퇴</h4>\r\n");
      out.write("			  <button type=\"button\" class=\"btn-close closeModal\" data-bs-dismiss=\"modal\"></button>\r\n");
      out.write("			</div>\r\n");
      out.write("	  \r\n");
      out.write("			<!-- Modal body -->\r\n");
      out.write("			<div class=\"modal-body\">\r\n");
      out.write("			  \r\n");
      out.write("				정말 탈퇴하시겠습니까?\r\n");
      out.write("				<br/>\r\n");
      out.write("				<span style=\"color: red;\">* 탈퇴하면 데이터의 복구가 불가능합니다 !!</span>\r\n");
      out.write("				\r\n");
      out.write("			  \r\n");
      out.write("			</div>\r\n");
      out.write("	  \r\n");
      out.write("			<!-- Modal footer -->\r\n");
      out.write("			<div class=\"modal-footer\">\r\n");
      out.write("				<!-- 아래도 동적 -->\r\n");
      out.write("			  <form action=\"leaveMember\" method=\"post\">\r\n");
      out.write("			  	<button type=\"submit\" class=\"btn btn-danger\" id=\"confirmLeaveBtn\">탈퇴</button> \r\n");
      out.write("			  </form>\r\n");
      out.write("			  <button type=\"button\" class=\"btn btn-secondary closeModal\" data-bs-dismiss=\"modal\">취소</button>\r\n");
      out.write("			</div>\r\n");
      out.write("	  \r\n");
      out.write("		  </div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../footer.jsp", out, false);
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
